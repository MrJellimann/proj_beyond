<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>k_up = 0;
k_down = 0;
k_left = 0;
k_right = 0;
m_left = 0;
m_right = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(GameManager.player))
{
    //===== Combat =====//
    GameManager.player.look_dir = point_direction(GameManager.player.x, GameManager.player.y, mouse_x, mouse_y);
    
    if (m_left)
    // Ranged attack
    {
        var b = instance_create(    GameManager.player.x + lengthdir_x(GameManager.player.weapon_length, GameManager.player.look_dir),
                                    GameManager.player.y + lengthdir_y(GameManager.player.weapon_length, GameManager.player.look_dir),
                                    Projectile);
        
        b._creator = GameManager.player;
        b._damage = 2;
        b._knockback = 4;
        b._length = GameManager.player.weapon_length;
        b.direction = GameManager.player.look_dir + 5 - random(10);
        b.image_angle = b.direction;
        b.speed = 14;
    }
    
    // Melee attack
    /*
    {
        var b = instance_create(    GameManager.player.x + lengthdir_x(GameManager.player.weapon_length, GameManager.player.look_dir),
                                    GameManager.player.y + lengthdir_y(GameManager.player.weapon_length, GameManager.player.look_dir),
                                    MeleeAttack);
        // Here is where the weapon type affects the melee attack
        
        b.alarm[0] = sprite_get_number(b.sprite_index);
        b._creator = GameManager.player;
        b._damage = 1;
        b._knockback = 3;
        b._length = GameManager.player.weapon_length;
        b.image_angle = GameManager.player.look_dir;
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>k_up = keyboard_check(ord("W"));
k_down = keyboard_check(ord("S"));
k_left = keyboard_check(ord("A"));
k_right = keyboard_check(ord("D"));

m_left = mouse_check_button(mb_left);
m_right = mouse_check_button_pressed(mb_right);

if (instance_exists(GameManager.player))
{
    //===== Player's movement =====//
    
    // Vertical movement
    if (k_up &amp;&amp; !k_down)
    {
        if (GameManager.player.v_spd &gt; -GameManager.player.spd_max)
            GameManager.player.v_spd -= GameManager.player.spd_amount;
    }
    else if (!k_up &amp;&amp; k_down)
    {
        if (GameManager.player.v_spd &lt; GameManager.player.spd_max)
            GameManager.player.v_spd += GameManager.player.spd_amount;
    }
    else
    {
        if (GameManager.player.v_spd &gt; 0)
            GameManager.player.v_spd -= GameManager.player.spd_amount;
        else if (GameManager.player.v_spd &lt; 0)
            GameManager.player.v_spd += GameManager.player.spd_amount;
    }
    
    // Horizontal Movement
    if (k_left &amp;&amp; !k_right)
    {
        if (GameManager.player.h_spd &gt; -GameManager.player.spd_max)
            GameManager.player.h_spd -= GameManager.player.spd_amount;
    }
    else if (!k_left &amp;&amp; k_right)
    {
        if (GameManager.player.h_spd &lt; GameManager.player.spd_max)
            GameManager.player.h_spd += GameManager.player.spd_amount;
    }
    else
    {
        if (GameManager.player.h_spd &gt; 0)
            GameManager.player.h_spd -= GameManager.player.spd_amount;
        else if (GameManager.player.h_spd &lt; 0)
            GameManager.player.h_spd += GameManager.player.spd_amount;
    }
    
    //===== Testing =====//
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
