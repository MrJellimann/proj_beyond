<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shadow_surf = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(shadow_surf);
    // Experimenting
    // draw_set_blend_mode(bm_add);
    // Clean surface
    if (instance_exists(GameManager.sun))
        draw_clear_alpha(GameManager.sun._color, GameManager.sun._intensity);
    else
        draw_clear_alpha(c_white, 0);
    
    // Basic shadows
    with (Entity)
    {
        var counter = 0;
        repeat (instance_number(Light))
        {
            var near_light;
            near_light = instance_find(Light, counter++);

            if (!near_light._precise)
            {
                if (distance_to_object(near_light) &gt; near_light._range)
                    near_light = noone;
                if (near_light != noone)
                {
                    if (collision_line(x, y, near_light.x, near_light.y, Obstacle, false, true))
                        near_light = noone;
                }
            }
            else
            {
                if (!place_meeting(x, y, near_light))
                    near_light = noone;
                
                if (near_light != noone)
                {
                    if (collision_line(x, y, near_light.x, near_light.y, Obstacle, false, true))
                        near_light = noone;
                }
            }
            
            var l_dir;
            
            if (near_light != noone)
                l_dir = point_direction(x, y, near_light.x, near_light.y) - 180;
            else
                l_dir = 180 - 15;
            
            if (near_light != noone)
            {
                d3d_set_fog(true, c_black, 0, 1);
                
                if (l_dir &gt; 180 || l_dir &lt;= 359)
                    draw_set_color(c_white);
                else
                    draw_set_color(c_black);
                
                //if (_leg_sprite == _torso_sprite)
                if (true)
                {
                    var _ind;
                    if (_cloaked)
                        _ind = 1;
                    else
                        _ind = 0;
                    draw_sprite_pos(sprShadow, _ind,
                                x - (sprite_width/2) + lengthdir_x(sprite_height/2, l_dir+10),
                                y - (sprite_height/4*0) + lengthdir_y(sprite_height/2, l_dir+10),
                                
                                x + (sprite_width/2) + lengthdir_x(sprite_height/2, l_dir-10),
                                y - (sprite_height/4*0) + lengthdir_y(sprite_height/2, l_dir-10),
                                
                                x + (sprite_width/2)-4, y,
                                x - (sprite_width/2)+4, y,
                                
                                0.8 * near_light._intensity * (1 - (distance_to_object(near_light) / near_light._range)));
                }
                else
                {
                    var sp_w, sp_h;
                    sp_w = sprite_get_width(_leg_sprite);
                    sp_h = sprite_get_height(_leg_sprite);
                    draw_sprite_pos(_leg_sprite, _leg_index,
                                x - (sp_w/2) + lengthdir_x(sp_h/2, l_dir+10),
                                y - (sp_h/4*0) + lengthdir_y(sp_h/2, l_dir+10),
                                
                                x + (sp_w/2) + lengthdir_x(sp_h/2, l_dir-10),
                                y - (sp_h/4*0) + lengthdir_y(sp_h/2, l_dir-10),
                                
                                x + (sp_w/2)-4, y,
                                x - (sp_w/2)+4, y,
                                
                                0.8 * (1 - (distance_to_object(near_light) / near_light._range)));
                    
                    sp_w = sprite_get_width(_torso_sprite);
                    sp_h = sprite_get_height(_torso_sprite);
                    draw_sprite_pos(_torso_sprite, 0,
                                x - (sp_w/2) + lengthdir_x(sp_h/2, l_dir+10),
                                y - (sp_h/4*0) + lengthdir_y(sp_h/2, l_dir+10),
                                
                                x + (sp_w/2) + lengthdir_x(sp_h/2, l_dir-10),
                                y - (sp_h/4*0) + lengthdir_y(sp_h/2, l_dir-10),
                                
                                x + (sp_w/2)-4, y,
                                x - (sp_w/2)+4, y,
                                
                                0.8 * (1 - (distance_to_object(near_light) / near_light._range)));
                }
                
                // Revert settings
                //draw_set_color(c_white);
                //draw_set_blend_mode(bm_normal);
                d3d_set_fog(false, c_white, 0, 0);
            }
        }
    }
    
    with (Solid)
    {
        var counter = 0;
        repeat (instance_number(Light))
        {
            var near_light;
            near_light = instance_find(Light, counter++);
    
            if (!near_light._precise)
            {
                if (distance_to_object(near_light) &gt; near_light._range)
                    near_light = noone;
                if (near_light != noone)
                {
                    if (collision_line(x, y, near_light.x, near_light.y, Obstacle, false, true))
                        near_light = noone;
                }
            }
            else
            {
                if (!place_meeting(x, y, near_light))
                    near_light = noone;
                
                if (near_light != noone)
                {
                    if (collision_line(x, y, near_light.x, near_light.y, Obstacle, false, true))
                        near_light = noone;
                }
            }
            
            var l_dir;
            
            if (near_light != noone)
                l_dir = point_direction(near_light.x, near_light.y, x, y);
            else
                l_dir = 180 - 15;
            
            if (near_light != noone)
            {
                var l_dist;
                l_dist = (1 - (distance_to_object(near_light) / near_light._range)) * 256;
                
                d3d_set_fog(true, c_black, 0, 1);
                    var x1, y1, x2, y2, x3, y3, x4, y4;
                    // Done!
                    if (l_dir &gt;= 45 &amp;&amp; l_dir &lt; 135)
                    {
                        x3 = x + (sprite_width/2);
                        y3 = y + (sprite_height/2);
                        x4 = x - (sprite_width/2);
                        y4 = y + (sprite_height/2);
                        x1 = x4 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        y1 = y4 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        x2 = x3 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                        y2 = y3 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                    }
                    // Done!
                    else if (l_dir &gt;= 135 &amp;&amp; l_dir &lt; 225)
                    {
                        x3 = x + (sprite_width/2);
                        y3 = y - (sprite_height/2);
                        x4 = x + (sprite_width/2);
                        y4 = y + (sprite_height/2);
                        x1 = x4 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        y1 = y4 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        x2 = x3 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                        y2 = y3 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                    }
                    // Done!
                    else if (l_dir &gt;= 225 &amp;&amp; l_dir &lt; 315)
                    {
                        x3 = x - (sprite_width/2);
                        y3 = y - (sprite_height/2);
                        x4 = x + (sprite_width/2);
                        y4 = y - (sprite_height/2);
                        x1 = x4 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        y1 = y4 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        x2 = x3 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                        y2 = y3 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                    }
                    // Done!
                    else if (l_dir &lt; 45 || l_dir &gt;= 315)
                    {
                        x3 = x - (sprite_width/2);
                        y3 = y - (sprite_height/2);
                        x4 = x - (sprite_width/2);
                        y4 = y + (sprite_height/2);
                        x1 = x4 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        y1 = y4 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x4, y4));
                        x2 = x3 + lengthdir_x(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                        y2 = y3 + lengthdir_y(l_dist, point_direction(near_light.x, near_light.y, x3, y3));
                    }
                    
                    draw_sprite_pos(sprite_index, image_index, x1, y1, x2, y2, x3, y3, x4, y4,
                                    0.8 * (1 - (distance_to_object(near_light) / near_light._range)));
                d3d_set_fog(false, c_white, 0, 0);
            }
        }
    }
    draw_set_blend_mode(bm_normal);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.9);
    draw_surface(shadow_surf, 0, 0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
