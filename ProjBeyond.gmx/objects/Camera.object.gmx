<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_target = noone;

respect_mouse = true;
_respect_mx = x;
_respect_my = y;

camera_width = view_wview;
camera_height = view_hview;

camera_half_width = camera_width / 2;
camera_half_height = camera_height / 2;

camera_shake = 0;
camera_follow_rate = 0.75;
_camera_recoil = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(_target))
{
    if (distance_to_point(_target.x, _target.y) &lt; 1)
    {
        x = _target.x;
        y = _target.y - _target._center_offset;
    }
    else
    {
        var _dir, _dist;
        _dir = point_direction(_target.x, _target.y - _target._center_offset, x, y);
        _dist = distance_to_point(_target.x, _target.y - _target._center_offset);
        
        x = _target.x + lengthdir_x(_dist * camera_follow_rate, _dir) + lengthdir_x(_camera_recoil, _dir-180);
        y = _target.y - _target._center_offset + lengthdir_y(_dist * camera_follow_rate, _dir) + lengthdir_y(_camera_recoil, _dir-180); 
    }
}

if (respect_mouse)
{
    // mouse_x, mouse_y

    var _dist, _dir;
    
    if (_target != noone)
        _dir = point_direction(_target.x, _target.y - _target._center_offset, _respect_mx, _respect_my);
    else
        _dir = point_direction(x, y, _respect_mx, _respect_my);
    
    _dist = distance_to_point(_respect_mx, _respect_my);
    
    x += lengthdir_x(_dist/10, _dir);
    y += lengthdir_y(_dist/10, _dir);
}

// Camera shake
if (camera_shake &gt; 0.25)
{
    camera_shake *= 0.75;
    x += random(camera_shake) * choose(1, -1);
    y += random(camera_shake) * choose(1, -1);
}
else
    camera_shake = 0;
// Recoil from weapons
if (_camera_recoil &gt; 0.5)
    _camera_recoil *= 0.75;
else
    _camera_recoil = 0;

// Handle the view
view_xview = x - camera_half_width;
view_yview = y - camera_half_height;
// view_angle = choose(1, -1) * camera_shake;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
